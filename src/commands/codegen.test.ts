import fs from 'fs-extra'
import { NO_MIGRATIONS } from 'kysely'
import { expect, test } from 'vitest'

import { mysqlDb, postgresDb } from '../../test/config.js'
import { type Config } from '../config.js'
import { getMigrator } from '../utils/getMigrator.js'
import { codegen } from './codegen.js'

test('mysql', async () => {
  const config = {
    db: mysqlDb,
    migrationFolder: 'test/migrations/mysql',
    codegen: {
      dialect: 'mysql',
      out: 'test/__app/types.ts',
    },
  } satisfies Config
  const migrator = getMigrator(config)

  await migrator.migrateTo(NO_MIGRATIONS)
  await migrator.migrateToLatest()

  await codegen(config, { silent: true })
  const file = await fs.readFile(config.codegen.out, 'utf-8')
  expect(file).toMatchInlineSnapshot(`
    "/** generated by kysely-migrate */
    import { type Generated, type ColumnType, type Selectable, type Insertable, type Updateable } from \\"kysely\\";

    type UnwrapColumnType<c> = c extends ColumnType<infer s, infer i, infer u> ? ColumnType<s, i | undefined, u> : ColumnType<c, c | undefined, c>;

    type Json = ColumnType<JsonValue, string, string>;

    type JsonValue = JsonArray | JsonObject | boolean | null | number | string;

    type JsonArray = JsonValue[];

    type JsonObject = {
        [key in string]?: JsonValue | undefined;
    };

    export type Foo = {
        behavior_autoincrementing: Generated<number>;
        behavior_default_value: Generated<string>;
        behavior_nullable: string | null;
        behavior_unwrap_column_type: Generated<UnwrapColumnType<ColumnType<string, number | string, number | string>>>;
        field_bigint: number;
        field_binary: Buffer;
        field_bit: Buffer;
        field_blob: Buffer;
        field_char: string;
        field_date: Date;
        field_datetime: Date;
        field_decimal: ColumnType<string, number | string, number | string>;
        field_double: number;
        field_enum: \\"foo\\" | \\"bar\\" | \\"baz\\";
        field_float: number;
        field_int: number;
        field_json: Json;
        field_longblob: Buffer;
        field_longtext: string;
        field_mediumblob: Buffer;
        field_mediumint: number;
        field_mediumtext: string;
        field_smallint: number;
        field_text: string;
        field_time: string;
        field_timestamp: Date;
        field_tinyblob: Buffer;
        field_tinyint: number;
        field_varbinary: Buffer;
        field_varchar: string;
        field_year: number;
    };

    export type FooSelectable = Selectable<Foo>;

    export type FooInsertable = Insertable<Foo>;

    export type FooUpdateable = Updateable<Foo>;

    export interface DB {
        foo: Foo;
    }

    "
  `)

  await migrator.migrateTo(NO_MIGRATIONS)
})

test('postgres', async () => {
  const config = {
    db: postgresDb,
    migrationFolder: 'test/migrations/postgres',
    codegen: {
      dialect: 'postgres',
      out: 'test/__app/types.ts',
    },
  } satisfies Config
  const migrator = getMigrator(config)

  await migrator.migrateTo(NO_MIGRATIONS)
  await migrator.migrateToLatest()

  await codegen(config, { silent: true })
  const file = await fs.readFile(config.codegen.out, 'utf-8')
  expect(file).toMatchInlineSnapshot(`
    "/** generated by kysely-migrate */
    import { type Generated, type ColumnType, type Selectable, type Insertable, type Updateable } from \\"kysely\\";

    type UnwrapColumnType<c> = c extends ColumnType<infer s, infer i, infer u> ? ColumnType<s, i | undefined, u> : ColumnType<c, c | undefined, c>;

    type Json = ColumnType<JsonValue, string, string>;

    type JsonValue = JsonArray | JsonObject | boolean | null | number | string;

    type JsonArray = JsonValue[];

    type JsonObject = {
        [key in string]?: JsonValue | undefined;
    };

    export type Foo = {
        behavior_autoincrementing: Generated<number>;
        behavior_default_value: Generated<string>;
        behavior_nullable: string | null;
        behavior_unwrap_column_type: Generated<UnwrapColumnType<ColumnType<Date, Date | string, Date | string>>>;
        field_bit: string;
        field_bool: boolean;
        field_box: string;
        field_bpchar: string;
        field_bytea: string;
        field_cidr: string;
        field_date: ColumnType<Date, Date | string, Date | string>;
        field_enum: \\"bar\\" | \\"baz\\" | \\"foo\\";
        field_float4: number;
        field_float8: number;
        field_inet: string;
        field_int2: number;
        field_int4: number;
        field_int8: ColumnType<string, string | number | bigint, string | number | bigint>;
        field_json: Json;
        field_jsonb: Json;
        field_line: string;
        field_lseg: string;
        field_macaddr: string;
        field_money: string;
        field_numeric: ColumnType<string, string | number, string | number>;
        field_oid: number;
        field_path: string;
        field_polygon: string;
        field_serial: Generated<number>;
        field_text: string;
        field_time: string;
        field_timestamp: ColumnType<Date, Date | string, Date | string>;
        field_timestamptz: ColumnType<Date, Date | string, Date | string>;
        field_tsquery: string;
        field_tsvector: string;
        field_txid_snapshot: string;
        field_uuid: string;
        field_varbit: string;
        field_varchar: string;
        field_xml: string;
    };

    export type FooSelectable = Selectable<Foo>;

    export type FooInsertable = Insertable<Foo>;

    export type FooUpdateable = Updateable<Foo>;

    export interface DB {
        foo: Foo;
    }

    "
  `)

  await migrator.migrateTo(NO_MIGRATIONS)
})
